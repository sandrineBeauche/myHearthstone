plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.10'
    id 'org.beryx.jlink' version '2.24.1'
    id 'org.javamodularity.moduleplugin' version '1.8.10'
    id 'de.jjohannes.extra-java-module-info' version "0.10"
}

group 'com.sbm4j.hearthstone'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
    // For MarkdownEditorControl
    maven { url 'https://jitpack.io' }

    // For some of it's dependencies
    maven { url "https://sandec.jfrog.io/artifactory/repo" }
    maven { url "https://dl.bintray.com/dukke/maven" }
}

ext {
    junitVersion = '5.8.2'
}

sourceCompatibility = '16'
targetCompatibility = '16'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

application {
    mainModule = 'com.sbm4j.hearthstone.myhearthstone'
    mainClass = 'com.sbm4j.hearthstone.myhearthstone.HearthstoneApplication'
}

javafx {
    version = '16'
    modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {
    implementation('org.controlsfx:controlsfx:11.1.0')
    implementation('com.google.code.gson:gson:2.8.9')
    implementation('org.hibernate:hibernate-core:5.6.1.Final')
    implementation('org.hsqldb:hsqldb:2.6.0')
    implementation('org.apache.logging.log4j:log4j-api:2.15.0')
    implementation('org.apache.logging.log4j:log4j-core:2.15.0')
    implementation('commons-codec:commons-codec:1.15')
    implementation('de.saxsys:mvvmfx:1.8.0')
    implementation('de.saxsys:mvvmfx-guice:1.8.0')
    implementation('com.google.inject:guice:5.0.1')
    implementation("de.jjohannes.gradle:extra-java-module-info:0.10")
    implementation('net.coobird:thumbnailator:0.4.15')
    implementation("javax.xml.bind:jaxb-api:2.3.1")
    //implementation("com.sun.xml.bind:jaxb-impl:2.3.1")
    implementation("org.glassfish.jaxb:jaxb-runtime:2.3.1")
    //implementation('com.mycila.guice.extensions:mycila-guice-jsr250:5.0')
    implementation('org.slf4j:slf4j-api:1.7.25')
    //implementation('com.microsoft.playwright:playwright:1.20.1')
    //implementation 'com.github.Dansoftowner:MarkdownEditorControlFX:0.6.3'

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter-params:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
    testImplementation("org.testfx:testfx-core:4.0.16-alpha"){
        exclude group:'org.hamcrest', module:'hamcrest-core'
    }
    testImplementation("org.hamcrest:hamcrest:2.2")
    testImplementation('org.dbunit:dbunit:2.7.2')
    testImplementation('commons-collections:commons-collections:3.2.2')
    testImplementation('com.github.database-rider:rider-core:1.32.0')
    testImplementation('com.github.database-rider:rider-junit5:1.32.0')
    /*testImplementation('org.jukito:jukito:1.5'){
        exclude group:'org.hamcrest', module:'hamcrest-core'
    }*/
    testImplementation("org.mockito:mockito-core:4.3.1")
}


extraJavaModuleInfo {
    automaticModule("thumbnailator-0.4.15.jar", "thumbnailator")
    automaticModule("antlr-2.7.7.jar", "antlr")
    automaticModule("slf4j-api-1.7.25.jar", "slf4j")
    automaticModule("typetools-0.6.1.jar", "typetools")
    automaticModule("doc-annotations-0.2.jar", "doc.annotations")
    automaticModule("javax.inject-1.jar", "javax.inject")
    automaticModule("aopalliance-1.0.jar", "aopalliance")
    automaticModule("failureaccess-1.0.1.jar", "failureaccess")
    automaticModule("listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar", "listenablefuture.empty")
    automaticModule("jsr305-3.0.2.jar", "jsr305")
    automaticModule("j2objc-annotations-1.3.jar", "j2objc.annotations")
    automaticModule("extra-java-module-info-0.10.jar", "extra.java.module.info")


    /*
    module("playwright-1.20.1.jar", "com.microsoft.playwright", "1.20.1"){
        exports("com.microsoft.playwright")
        exports("com.microsoft.playwright.impl")

    }*/
    //automaticModule("driver-bundle-1.20.1.jar", "com.microsoft.playwright")
    //automaticModule("driver-1.20.1.jar", "com.microsoft.playwright")
    /*
    module("driver-bundle-1.20.1.jar", "com.microsoft.playwright", "1.20.1"){
        exports("com.microsoft.playwright.impl")
    }
    module("driver-1.20.1.jar", "com.microsoft.playwright", "1.20.1"){
        exports("com.microsoft.playwright.impl")
    }*/


    /*
    automaticModule("mdfx-0.1.9.jar", "mdfx")
    automaticModule("flexmark-ext-gfm-strikethrough-0.62.2.jar", "com.vladsch.flexmark.ext.gfm.strikethrough")
    automaticModule("flexmark-ext-tables-0.62.2.jar", "com.vladsch.flexmark.ext.tables")
    automaticModule("flexmark-ext-attributes-0.62.2.jar", "com.vladsch.flexmark.ext.attributes")
    automaticModule("undofx-2.1.0.jar", "org.fxmisc.undo")
    automaticModule("flowless-0.6.3.jar", "flowless")
    automaticModule("reactfx-2.0-M5.jar", "org.reactfx")
    automaticModule("wellbehavedfx-0.3.3.jar", "org.fxmisc.wellbehaved")
    automaticModule("flexmark-util-0.62.2.jar", "com.vladsch.flexmark.util")
    automaticModule("flexmark-0.62.2.jar", "com.vladsch.flexmark")
    automaticModule("flexmark-util-format-0.62.2.jar", "com.vladsch.flexmark.util.format")
    automaticModule("flexmark-util-ast-0.62.2.jar", "com.vladsch.flexmark.util.ast")
    automaticModule("flexmark-util-builder-0.62.2.jar", "com.vladsch.flexmark.util.builder")
    automaticModule("flexmark-util-dependency-0.62.2.jar", "com.vladsch.flexmark.util.dependency")
    automaticModule("flexmark-util-html-0.62.2.jar", "com.vladsch.flexmark.util.html")
    automaticModule("flexmark-util-options-0.62.2.jar", "com.vladsch.flexmark.util.options")
    automaticModule("flexmark-util-sequence-0.62.2.jar", "com.vladsch.flexmark.util.sequence")
    automaticModule("flexmark-util-collection-0.62.2.jar", "com.vladsch.flexmark.util.collection")
    automaticModule("flexmark-util-data-0.62.2.jar", "com.vladsch.flexmark.util.data")
    automaticModule("flexmark-util-misc-0.62.2.jar", "com.vladsch.flexmark.util.misc")
    automaticModule("flexmark-util-visitor-0.62.2.jar", "com.vladsch.flexmark.util.visitor")
    automaticModule("annotations-15.0.jar", "org.jetbrains.annotations")
     */

    module("mvvmfx-1.8.0.jar", "de.saxsys.mvvmfx", "1.8.0"){
        requires("javafx.base")
        requires("javafx.graphics")
        requires("javafx.fxml")
        requires("slf4j")
        exports("de.saxsys.mvvmfx")
        exports("de.saxsys.mvvmfx.internal")
        exports("de.saxsys.mvvmfx.utils.commands")
        exports("de.saxsys.mvvmfx.utils.itemlist")
        exports("de.saxsys.mvvmfx.utils.mapping")
        exports("de.saxsys.mvvmfx.utils.notifications")
        exports("de.saxsys.mvvmfx.utils.viewlist")
    }
    module('mvvmfx-guice-1.8.0.jar', 'de.saxsys.mvvmfx.guice', "1.8.0"){
        requires("javafx.base")
        requires("javafx.graphics")
        requires("de.saxsys.mvvmfx")
        requires("com.google.guice")
        exports("de.saxsys.mvvmfx.guice")
    }
    //automaticModule('hamcrest-core-1.3.jar', 'hamcrest.core')
    automaticModule('hamcrest-2.2.jar', 'hamcrest')
    //automaticModule('guice-5.0.1.jar', "com.google.guice")
    automaticModule('guava-30.2-jre.jar', 'com.google.common')
    automaticModule("jaxb-impl-2.3.0.jar", "com.sun.xml.bind")
    automaticModule("testfx-core-4.0.16-alpha.jar", "org.testfx")

    automaticModule("rider-core-1.32.0.jar", "com.github.database.rider.core")
    automaticModule("rider-junit5-1.32.0.jar", "com.github.database.rider.junit5")

    automaticModule("dbunit-2.7.2.jar", "org.dbunit")
    automaticModule("snakeyaml-1.16.jar", "org.yaml.snakeyaml")
    automaticModule("jackson-mapper-lgpl-1.9.13.jar", "org.codehaus.jackson.mapper")
    automaticModule("commons-collections-3.2.2.jar", "commons.collections")
    automaticModule("postgresql-42.2.5.jar", "org.postgresql")
    automaticModule("jackson-core-lgpl-1.9.13.jar", "org.codehaus.jackson.core")
    automaticModule("mysql-connector-java-8.0.25.jar", "mysql.connector.java")

    /*automaticModule("jukito-1.5.jar", "org.jukito")
    automaticModule("guice-assistedinject-4.0.jar", "com.google.inject.assistedinject")
    automaticModule("mockito-core-2.5.7.jar", "org.mockito")
    automaticModule("junit-4.12.jar", "junit")
    automaticModule("byte-buddy-agent-1.6.2.jar", "net.bytebuddy.agent")
    automaticModule("objenesis-2.4.jar", "org.objenesis")*/
}

modularity.patchModule("com.microsoft.playwright", "driver-1.20.1.jar")
modularity.patchModule("com.microsoft.playwright", "driver-bundle-1.20.1.jar")

compileJava {
    moduleOptions {
        addExports = [
                'de.saxsys.mvvmfx/de.saxsys.mvvmfx.utils.mapping.accessorfunctions':'com.sbm4j.hearthstone.myhearthstone'
        ]
    }
}

compileTestJava {
    moduleOptions {
        addReads = [
                'com.sbm4j.hearthstone.myhearthstone': 'org.testfx'
        ]
        addExports = [
                'javafx.graphics/com.sun.javafx': 'org.testfx'
        ]
    }
}

test {
    useJUnitPlatform()
    moduleOptions {
        addReads = [
                'com.sbm4j.hearthstone.myhearthstone': 'org.testfx'
        ]
        addExports = [
                'javafx.graphics/com.sun.javafx.application': 'org.testfx',
                'org.junit.platform.commons/org.junit.platform.commons.util': 'com.github.database.rider.junit5',
                'com.sbm4j.hearthstone.myhearthstone/com.sbm4j.hearthstone.myhearthstone.model': 'org.hamcrest',
                'com.sbm4j.hearthstone.myhearthstone/com.sbm4j.hearthstone.myhearthstone.services.imports': 'org.hamcrest'
        ]
        addOpens = [
                "com.sbm4j.hearthstone.myhearthstone/com.sbm4j.hearthstone.myhearthstone.services.imports": "com.github.database.rider.junit5",
                "com.sbm4j.hearthstone.myhearthstone/com.sbm4j.hearthstone.myhearthstone.services.db": "com.github.database.rider.junit5",
                "com.sbm4j.hearthstone.myhearthstone/com.sbm4j.hearthstone.myhearthstone.views": "com.github.database.rider.junit5",
                "com.sbm4j.hearthstone.myhearthstone/com.sbm4j.hearthstone.myhearthstone.viewmodel": "com.github.database.rider.junit5"
        ]
    }
    testLogging {
        events 'PASSED', 'FAILED', 'SKIPPED'
    }
}



jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'app'
    }
}

jlinkZip {
    doFirst{
        System.out.println("zip distributions")
    }
    group = 'distribution'
}

distZip {
    into("${project.name}-${version}") {
        from '.'
        include 'data/**'
        include 'config.properties'
    }
}

distTar {
    into("${project.name}-${version}") {
        from '.'
        include 'data/**'
        include 'config.properties'
    }
}