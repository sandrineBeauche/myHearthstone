plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.10'
    id 'org.beryx.jlink' version '2.24.1'
    id 'org.javamodularity.moduleplugin' version '1.8.10'
    id 'de.jjohannes.extra-java-module-info' version "0.10"
}

group 'com.sbm4j.hearthstone'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

ext {
    junitVersion = '5.8.2'
}

sourceCompatibility = '16'
targetCompatibility = '16'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

application {
    mainModule = 'com.sbm4j.hearthstone.myhearthstone'
    mainClass = 'com.sbm4j.hearthstone.myhearthstone.HelloApplication'
}

javafx {
    version = '16'
    modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {
    implementation('org.controlsfx:controlsfx:11.1.0')
    implementation('com.google.code.gson:gson:2.8.9')
    implementation('org.hibernate:hibernate-core:5.6.1.Final')
    implementation('org.hsqldb:hsqldb:2.6.0')
    implementation('org.apache.logging.log4j:log4j-api:2.15.0')
    implementation('org.apache.logging.log4j:log4j-core:2.15.0')
    implementation('commons-codec:commons-codec:1.15')
    implementation('de.saxsys:mvvmfx:1.8.0')
    implementation('de.saxsys:mvvmfx-guice:1.8.0')
    implementation('com.google.inject:guice:5.0.1')
    implementation("de.jjohannes.gradle:extra-java-module-info:0.10")
    implementation('net.coobird:thumbnailator:0.4.15')
    implementation("javax.xml.bind:jaxb-api:2.3.0")
    implementation("com.sun.xml.bind:jaxb-impl:2.3.0")
    implementation("org.glassfish.jaxb:jaxb-runtime:2.3.0")
    //implementation('com.mycila.guice.extensions:mycila-guice-jsr250:5.0')

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter-params:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
    testImplementation("org.testfx:testfx-core:4.0.16-alpha")
    //testImplementation("org.hamcrest:hamcrest:2.2")
    testImplementation("org.testfx:testfx-core:4.0.16-alpha")
}

extraJavaModuleInfo {
    automaticModule("thumbnailator-0.4.15.jar", "thumbnailator")
    automaticModule("antlr-2.7.7.jar", "antlr")
    automaticModule("slf4j-api-1.7.12.jar", "slf4j")
    automaticModule("typetools-0.6.1.jar", "typetools")
    automaticModule("doc-annotations-0.2.jar", "doc.annotations")
    automaticModule("javax.inject-1.jar", "javax.inject")
    automaticModule("aopalliance-1.0.jar", "aopalliance")
    automaticModule("failureaccess-1.0.1.jar", "failureaccess")
    automaticModule("listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar", "listenablefuture.empty")
    automaticModule("jsr305-3.0.2.jar", "jsr305")
    automaticModule("j2objc-annotations-1.3.jar", "j2objc.annotations")
    automaticModule("extra-java-module-info-0.10.jar", "extra.java.module.info")
    module("mvvmfx-1.8.0.jar", "de.saxsys.mvvmfx", "1.8.0"){
        requires("javafx.base")
        requires("javafx.graphics")
        requires("javafx.fxml")
        requires("slf4j")
        exports("de.saxsys.mvvmfx")
        exports("de.saxsys.mvvmfx.internal")
    }
    module('mvvmfx-guice-1.8.0.jar', 'de.saxsys.mvvmfx.guice', "1.8.0"){
        requires("javafx.base")
        requires("javafx.graphics")
        requires("de.saxsys.mvvmfx")
        requires("com.google.guice")
        exports("de.saxsys.mvvmfx.guice")
    }
    automaticModule('hamcrest-core-1.3.jar', 'hamcrest.core')
    automaticModule('guice-5.0.1.jar', "com.google.guice")
    automaticModule('guava-30.2-jre.jar', 'com.google.common')
    //automaticModule("byte-buddy-1.11.20.jar", "net.bytebuddy")
    //automaticModule("hibernate-core-5.6.1.Final.jar", "org.hibernate")
    automaticModule("jaxb-impl-2.3.0.jar", "com.sun.xml.bind")
    automaticModule("testfx-core-4.0.16-alpha.jar", "org.testfx")
}

compileTestJava {
    moduleOptions {
        addReads = [
                'com.sbm4j.hearthstone.myhearthstone': 'org.testfx'
        ]
        addExports = [
                'javafx.graphics/com.sun.javafx': 'org.testfx'
        ]
    }
}

test {
    useJUnitPlatform()
    moduleOptions {
        addReads = [
                'com.sbm4j.hearthstone.myhearthstone': 'org.testfx'
        ]
        addExports = [
                'javafx.graphics/com.sun.javafx.application': 'org.testfx'
        ]


    }
    testLogging {
        events 'PASSED', 'FAILED', 'SKIPPED'
    }
}



jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'app'
    }
}

jlinkZip {
    group = 'distribution'
}